package gui;

import dao.SubmissionDaoInterface;
import domain.Assignment;
import domain.Submission;
import domain.User;
import dao.impl.SubmissionDao;
import util.FrameUtil;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.text.*;
import java.util.List;
import java.util.Date;

public class SubmissionGUI extends JFrame {
    private final SubmissionDaoInterface submissionDao = new SubmissionDao();
    private JPanel submissionPanel;
    private JToolBar toolBar1;
    private JButton backButton;
    private JButton clearButton;
    private JButton submitButton;
    private JPanel mainPanel;
    private JLabel assignmentLabel;
    private JLabel programmeLabel;
    private JTextArea submissionContent;
    private JTextArea assignmentContent;
    private JTable submissionTable;
    private JLabel historyLabel;
    private JButton deleteButton;
    private JPanel assignmentCard;
    private JLabel nullContentLabel;
    private JButton checkHistoryButton;
    private JButton uploadButton;

    public SubmissionGUI(User user, Assignment assignment) {
        SubmissionDaoInterface submissionDao = new SubmissionDao();

        assignmentLabel.setText(assignment.getAssignmentName());
        assignmentContent.setEditable(false);

        CardLayout cardLayout = (CardLayout) assignmentCard.getLayout();
        if (assignment.getAssignmentContent() == null || assignment.getAssignmentContent().isEmpty()) {
            cardLayout.show(assignmentCard, "nullContentCard");
        } else {
            cardLayout.show(assignmentCard, "contentCard");
            assignmentContent.setText(assignment.getAssignmentContent());
        }

        backButton.addActionListener(e -> {
            SubmissionGUI.this.dispose();
            new SelectAssignmentGUI(user);
        });

        clearButton.addActionListener(e -> {
            submissionContent.setText("");
        });

        submitButton.addActionListener(e -> {
            Submission newSubmission = Submission.builder()
                    .submissionContent(submissionContent.getText())
                    .assignmentID(assignment.getAssignmentID())
                    .studentID(user.getUserId())
                    .build();

            if (submissionDao.insertSubmission(newSubmission)) {
                FrameUtil.showConfirmation(SubmissionGUI.this, "Submit successfully!");
            } else {
                FrameUtil.showConfirmation(SubmissionGUI.this, "Something wrong!");
            }
            new SubmissionGUI(user, assignment);
        });

        DefaultTableModel tableModel = new DefaultTableModel();
        submissionTable.setModel(tableModel);
        tableModel.addColumn("Order");
        tableModel.addColumn("Time");
        tableModel.addColumn("Status");
        TableColumn orderColumn = submissionTable.getColumnModel().getColumn(0);
        orderColumn.setPreferredWidth(5);
        orderColumn = submissionTable.getColumnModel().getColumn(1);
        orderColumn.setPreferredWidth(80);

        String[] rowName = {
                "Order",
                "Time",
                "Status"
        };
        tableModel.addRow(rowName);

        List<Submission> submissionList = submissionDao.getSubmissionsOfOneAssignmentAndStudent(assignment.getAssignmentID(), user.getUserId());
        for (Submission submission : submissionList) {
            Object[] rowData = {
                    submission.getSubmissionOrder(),
                    submission.getSubmissionTime(),
                    submission.getSubmissionStatus()

            };
            tableModel.addRow(rowData);
        }
        TableColumn timeColumn = submissionTable.getColumnModel().getColumn(1);
        timeColumn.setCellRenderer(new TimestampRenderer());

        checkHistoryButton.addActionListener(e -> {
            int selectedRow = submissionTable.getSelectedRow();
            if (selectedRow >= 1) {
                int submissionOrder = (int) tableModel.getValueAt(selectedRow, 0);
                new CorrectOrCheckGUI(user, assignment, submissionOrder);
            } else {
                FrameUtil.showConfirmation(SubmissionGUI.this, "You haven't select any submission!");
                new SubmissionGUI(user, assignment);
            }
        });

        uploadButton.addActionListener(FrameUtil.uploadAction());

        setContentPane(submissionPanel);
        setTitle("Submit your assignment or manage your history");
        setSize(750, 600);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setVisible(true);
        setLocationRelativeTo(null);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        submissionPanel = new JPanel();
        submissionPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        toolBar1 = new JToolBar();
        submissionPanel.add(toolBar1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        backButton = new JButton();
        backButton.setText("Back");
        toolBar1.add(backButton);
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        toolBar1.add(spacer1);
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        toolBar1.add(spacer2);
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        toolBar1.add(spacer3);
        uploadButton = new JButton();
        uploadButton.setText("Upload");
        toolBar1.add(uploadButton);
        clearButton = new JButton();
        clearButton.setText("Clear");
        toolBar1.add(clearButton);
        submitButton = new JButton();
        submitButton.setText("Submit");
        toolBar1.add(submitButton);
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 5, new Insets(0, 0, 0, 0), -1, -1));
        submissionPanel.add(mainPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        assignmentLabel = new JLabel();
        assignmentLabel.setText("Assignment");
        mainPanel.add(assignmentLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        programmeLabel = new JLabel();
        programmeLabel.setText("Submission");
        mainPanel.add(programmeLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(290, 17), null, 0, false));
        submissionTable = new JTable();
        mainPanel.add(submissionTable, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 150), null, 0, false));
        submissionContent = new JTextArea();
        submissionContent.setText("");
        mainPanel.add(submissionContent, new com.intellij.uiDesigner.core.GridConstraints(1, 4, 3, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(290, 17), new Dimension(290, -1), 0, false));
        historyLabel = new JLabel();
        historyLabel.setText("Your history:");
        mainPanel.add(historyLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        assignmentCard = new JPanel();
        assignmentCard.setLayout(new CardLayout(0, 0));
        mainPanel.add(assignmentCard, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, 250), new Dimension(-1, 250), 0, false));
        nullContentLabel = new JLabel();
        nullContentLabel.setHorizontalAlignment(0);
        nullContentLabel.setHorizontalTextPosition(0);
        nullContentLabel.setText("No content");
        assignmentCard.add(nullContentLabel, "nullContentCard");
        assignmentContent = new JTextArea();
        assignmentCard.add(assignmentContent, "contentCard");
        checkHistoryButton = new JButton();
        checkHistoryButton.setHorizontalAlignment(0);
        checkHistoryButton.setHorizontalTextPosition(0);
        checkHistoryButton.setText("Check");
        mainPanel.add(checkHistoryButton, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer4 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer4, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        deleteButton = new JButton();
        deleteButton.setText("Delete");
        mainPanel.add(deleteButton, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return submissionPanel;
    }

    public static class TimestampRenderer extends DefaultTableCellRenderer {
        private final SimpleDateFormat sdf = new SimpleDateFormat("yy-MM-dd HH:mm:ss");

        @Override
        protected void setValue(Object value) {
            if (value instanceof Date) {
                value = sdf.format(value); // Format the timestamp as desired
            }
            super.setValue(value);
        }
    }
}
